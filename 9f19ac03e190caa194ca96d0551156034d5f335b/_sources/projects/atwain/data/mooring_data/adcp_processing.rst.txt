ADCP processing
###############

Source files
============

Using the data received from A.R. on September 2019.

Located in ``~/work/atwain/data/raw_mooring_data/`` on Ø.L.'s system.

============  ========== ======================================================================
Dep           Year       File
============  ========== ======================================================================
1             2012-2013  ``2012_2013/RDI_ADCPs/AT201/AT201000.000``
2             2013-2015  ``2013_2015/RDI/AT201/AT201000.000``
3             2015-2017  ``2015_2017/AT201/AT201000.000``
============  ========== ======================================================================

Converting from binary
======================

Using *WinADCP* to read the binary *.000* files above. Exporting :math:`^X` (all fields)
directly to .mat files in ``atwain/data/reprocessed_mooring_data/``:


============  ========== ======================================================================
Dep           Year       .mat file
============  ========== ======================================================================
1             2012-2013  ``adcps_2012_2013/adcp2012_2013_read_raw.mat``
2             2013-2015  ``adcps_2013_2015/adcp2013_2015_read_raw.mat``
3             2015-2017  ``adcps_2015_2017/adcp2015_2017_read_raw.mat``
============  ========== ======================================================================

*X: In WinADCP: Export menu -> Series/Ancillary -> Click "all bins", select all
data fields, select a range spanning the whole deployment, select ".mat"*. 

.. figure:: /files/winadcp_export_example.png
    :scale: 30%


Processing/QC algorithm 
========================

Reprocessed all ADCP-data using the module *oyv.data.rdi_adcp*. The script is 
``atwain/code/processing_and_data/moorings/adcps/reprocessing/``
``qc_processing/process_mat_to_qc_bunch.py``, which applies the
following algorithm to all three deployments individually:

**Processing algorithm** (``process_mat_to_qc_bunch.py``):

#. Loading *.mat* files generated by *WinADCP*.
#. Extracting data, time and documentation.
#. Transferring to preferred naming conventions and units (e.g. *SerEmmpersec*
   :math:`\rightarrow` *u* and *mm/s* :math:`\rightarrow` *cm/s*).
#. Calculating bin depth at each measurement as:
   ::

    dep = ANDepthmm*1e-3 - RDIBin1Mid - RDIBinSize(SerBins-1)     
#. Removing measurements taken during deployment and recovery (pressure
   criterion combioned with visual check). 
#. Removing bins whose mean extent includes depths < 0 m.
#. :math:`^X` Cutting away the *n* bins nearest to the transducer since there appears to be
   some (presumably artificial) dampening of the velocity in these bins. See box
   below for details.
#. Masking measurements according to a number of successive flagging criteria:
    #. Current speed exceeds 100 cm/s (``sqrt(u²+v²)>100.0``).
    #. Less than 75% of pings come from good beams (``pg1+pg4<75.0``).
    #. Beam average backscatter amplitude is less than 64 db (``amp_a<64.0``).
    #. Error velocity greaqter than 5 cm/s (``|errvel|>5.0``).
    #. Pulse-to-pulse correlation (counts, 0-255) is less than 45 (``ca<45.0``)
       for 2 or more beams.
#. Rotating the current vector to correct for time-dependent magnetic
   declination (increasing from 19.6⁰ to 21.8⁰) calculated using ``geomag`` module,
   which uses the NOAA National Geophysical Data Center, epoch 2015 data.
#. Computing shear (:math:`u_z, v_z, S^2`) from first differences.
#. Converting to Bunch dictionary and saved to disk. 

Saved the files as pickled python Bunches:

============  ========== ======================================================================
Dep           Year       .p file
============  ========== ======================================================================
1             2012-2013  ``adcps_2012_2013/atwain_adcp_proc_dep1.p``
2             2013-2015  ``adcps_2013_2015/atwain_adcp_proc_dep2.p``
3             2015-2017  ``adcps_2015_2017/atwain_adcp_proc_dep3.p``
============  ========== ======================================================================


.. admonition:: Chopping out near-transducer bins

    :math:`^X` The bins nearest to the transducer look anomalous, click figures
    below for details.  

    ============  ============ ============ ============= =================
    Dep           Bins removed Bin size     Range removed Final depth range
    ============  ============ ============ ============= =================
    1             2            4 m          8 m           3.4 m - 95.4 m
    2             2            4 m          8 m           2.8 m - 98.8 m 
    3             1            8 m          8 m           10.8 m - 98.8 m  
    ============  ============ ============ ============= =================


    .. figure:: /files/u_v_mean_std_deployments_atwain_adcp.png
        :scale: 10%

        *Mean and STD of u (left) and v (right) for the three deployments*
        **without** *removal of the near-transducer bins (successive from top to bottom*).

    .. figure:: /files/s2_mean_std_deployments_atwain_adcp.png
        :scale: 10%

        *Same, for shear squared.*


Interpolation to common depth grid
==================================

All profiles from *u* and *v* were interpolated onto an even depth grid:

    - *dz = 2 m*.
    - Between 14 and 94 m depth. 

Code: ``atwain/code/processing_and_data/moorings/adcps/reprocessing/combine_deployments/combine_deployments.py``

Only *u* and *v* for now, but this can easily be extended to include other
variables (shear, backscatter..) if necessary.


**Output file**

``/atwain/data/reprocessed_mooring_data/adcp_combined/adcp_uv_interp_dep.p``