Octave
::::::

**Adding directories to path**

::

 addpath(genpath('/home/../path'))
 savepath

To display current path directories, call *path*.

**Running a script**

::

 run script.m

**Exporting to Python**

It is fairly simple to transfer variables from Octave to Python. The easiest way is to save the wanted variables in a *.mat* file and import with *pycurrents.file.matfile.loadmatbunch*, which is an improvement of *scipy.io.loadmat*.

Both these functions havre troublke with the default *.mat* format created by Octave. This is remedied by specifying *'-6'* in the Octave *save* command. As far as I understand, this saves the data in Matlab 6 format, which works seamlessly with the Python import functions. 


*Example: transferring the variables *T* and *S* from Octave to Python.*

::

 (IN OCTAVE):

 save('/home/../location/fname.mat','T','S','-6')

 (IN PYTHON)

 import pycurrents.file.matfile as mf
 data = mf.loadmatbunch('/home/../location/fname.mat')

*T* and *S* are now accessible in the Bunch *data*. 
