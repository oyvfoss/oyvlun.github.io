Time
====



*datetime* objects can be of several types, including *time* and *date* or the combination *datetime* (which is the one referred to henceforth).


The Epoch
+++++++++
Definition of *"t=0"* in Python. Corresponds to 00:00:00 on Jaruary 1st, 1970. As far as I understand, the Gregorian format (time since 0001-01-01) is usually the one we use (giving numbers in the ~700000 range..) 


Date to timestamp (Gregorian)
+++++++++++++++++++++++++++++

**d = datetime.datetime(1988,3,3)**


**date2num(d)**


Timestamp to Date (Gregorian)
+++++++++++++++++++++++++++++

**date = num2date(timestamp)**

Date to timestamp (Epoch)
+++++++++++++++++++++++++

It seems there is no straightforward way of doing this for Python $<$ 3.0. 


This seems to be the easiest workaround:

**import calendar
d = datetime.datetime(2013,1,20)
timestamp = calendar.timegm(d.timetuple())**


Date to string
++++++++++++++

**d = datetime.datetime(1988,2,3)
d.strftime("%B %d, %Y")**

Returns:
*'February 03, 1988'*

Format keys:
%D: Standard date format ('02/13/88')

%B : Full month name, long ('February')

%b : Full month name, short ('Feb') 

%Y : Year, long ('1988')

%y : Year, short ('88')

%d : Date, 2 digits ('2') 

%A : Weekday, long ('Wednesday')

%a : Weekday, short ('Wed')

%w : Weekday, number ('0' (Sunday) to '6' (Saturday))
 
%m : Month, number ('01'-'12') 

%M : Minute, number ('00'-'59') 

%M : Second, number ('00'-'59') 

%H : Hour, number ('00'-'23') 

%W : Week, number ('01'-'52') 


More options `here`_.

.. _here: http://docs.python.org/2/library/datetime.html#strftime-strptime-behavior


Other
+++++
Boolean operators work for datetime objects
